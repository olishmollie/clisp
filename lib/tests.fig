(def test (lambda (given expected)
    (print "Test: (equal? " given " " expected ")")
    (cond ((equal? (eval given) expected) (println " --- PASS"))
          (#t (println " --- FAIL")))))


(test '(quote a) 'a)
(test ''a (quote a))
(test ''(a b c) (quote (a b c)))

(test '(atom? nil) #t)
(test '(atom? 'sym) #t)
(test '(atom? "string") #t)
(test '(atom? 3/4) #t)
(test '(atom? 42) #t)
(test '(atom? (atom? 'a)) #t)
(test '(atom? +) #f)
(test '(atom? '(atom? 'a)) #f)
(test '(atom? (lambda (x) x)) #f)
(test '(atom? '(a b c)) #f)

(test '(eq? 'a 'a) #t)
(test '(eq? 42 42) #t)
(test '(eq? "string" "string") #t)
(test '(eq? 'a 'b) #f)

(test '(car '(a . b)) 'a)
(test '(car '(a b c)) 'a)

(test '(cdr '(a . b)) 'b)
(test '(cdr '(a b c)) '(b c))


(test '((lambda (x) (cons x '(b))) 'a) '(a b))
(test '((lambda (x y) (cons x (cdr y))) 'z '(a b c)) '(z b c))
(test '((lambda (f) (f '(b c))) (lambda (x) (cons 'a x))) '(a b c))

(test '((lambda () (def x 42) x)) 42)