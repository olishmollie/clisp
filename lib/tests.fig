(define test (lambda (given expected)
    (print "Test: (equal? " given " " expected ")")
    (cond ((equal? (eval given) expected) (println " --- PASS"))
          (#t (println " --- FAIL")))))


(test '(quote a) 'a)
(test ''a (quote a))
(test ''(a b c) (quote (a b c)))

(test '(atom nil) #t)
(test '(atom 'sym) #t)
(test '(atom "string") #t)
(test '(atom 3/4) #t)
(test '(atom 42) #t)
(test '(atom (atom 'a)) #t)
(test '(atom +) #f)
(test '(atom '(atom 'a)) #f)
(test '(atom (lambda (x) x)) #f)
(test '(atom '(a b c)) #f)

(test '(eq 'a 'a) #t)
(test '(eq 42 42) #t)
(test '(eq "string" "string") #t)
(test '(eq 'a 'b) #f)

(test '(car '(a . b)) 'a)
(test '(car '(a b c)) 'a)

(test '(cdr '(a . b)) 'b)
(test '(cdr '(a b c)) '(b c))

(test '((lambda (x) (cons x '(b))) 'a) '(a b))
(test '((lambda (x y) (cons x (cdr y))) 'z '(a b c)) '(z b c))
(test '((lambda (f) (f '(b c))) (lambda (x) (cons 'a x))) '(a b c))
(test '((lambda () (define x 42) x)) 42)

(test '(type '(a b c d e f)) "cons")
(test '(type "string") "string")
(test '(type 42) "number")
(test '(type #t) "constant")

(test '(string->list "hello") '(#\h #\e #\l #\l #\o))
(test '(list->string '(#\h #\e #\l #\l #\o)) "hello")

(test '(and #t #t) #t)
(test '(and #t #f) #f)
(test '(and #f #f) #f)

(test '(or #t #t) #t)
(test '(or #t #f) #t)
(test '(or #f #f) #f)

(test '(not #t) #f)
(test '(not #f) #t)

(test '(> 1 0) #t)
(test '(> 1 1) #f)
(test '(> 3/4 3/8) #t)
(test '(> 3/8 3/4) #f)
(test '(> 0.75 1.5) #f)
(test '(> 1.5 0.75) #t)