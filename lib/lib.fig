(define (list . items) items)

(define (length lis)
  (define (length-iter lis count)
     (if (null? lis)
         count
         (length-iter (cdr lis) (+ 1 count))))
  (length-iter lis 0))

(define (vector . items)
  (define vec (make-vector (length items)))
  (define (vector-iter vec items k)
    (if (null? items)
        vec
        (begin (vector-set! vec k (car items))
               (vector-iter vec (cdr items) (+ k 1)))))
  (vector-iter vec items 0))

(define (vector->list vec)
  (define (iter count n)
    (if (= count n)
        '()
        (cons (vector-ref vec count)
              (iter (+ count 1) n))))
  (iter 0 (vector-length vec)))


(define (caar l) (car (car l)))
(define (cadr l) (car (cdr l)))
(define (cdar l) (cdr (car l)))
(define (cddr l) (cdr (cdr l)))
(define (caaar l) (car (car (car l))))
(define (caadr l) (car (car (cdr l))))
(define (cadar l) (car (cdr (car l))))
(define (cdaar l) (cdr (car (car l))))
(define (cddar l) (cdr (cdr (car l))))
(define (cdadr l) (cdr (car (cdr l))))
(define (caddr l) (car (cdr (cdr l))))
(define (cdddr l) (cdr (cdr (cdr l))))
(define (caaaar l) (car (car (car (car l)))))
(define (cdaaar l) (cdr (car (car (car l)))))
(define (cadaar l) (car (cdr (car (car l)))))
(define (caadar l) (car (car (cdr (car l)))))
(define (caaadr l) (car (car (car (cdr l)))))
(define (cddaar l) (cdr (cdr (car (car l)))))
(define (cdadar l) (cdr (car (cdr (car l)))))
(define (cdaadr l) (cdr (car (car (cdr l)))))
(define (cdddar l) (cdr (cdr (cdr (car l)))))
(define (cddadr l) (cdr (cdr (car (cdr l)))))
(define (cddddr l) (cdr (cdr (cdr (cdr l)))))
(define (cadddr l) (car (cdr (cdr (cdr l)))))
(define (cdaddr l) (cdr (car (cdr (cdr l)))))
(define (cadddr l) (car (cdr (cdr (cdr l)))))
(define (cadadr l) (car (cdr (car (cdr l)))))
(define (caaddr l) (car (car (cdr (cdr l)))))
