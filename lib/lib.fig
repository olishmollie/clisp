(def newline "\n")
(def null? (lambda (x)
    (cond ((atom x) (eq x '()))
          (#t #f))))

(def not (lambda (x)
    (cond (x #t)
          (#t #t))))
(def and (lambda (x y)
    (cond (x
           (cond (y #t)
                 (#t #f)))
          (#t #f))))
(def or (lambda (x y)
    (cond (x #t)
          (#t (cond (y #t)
                      (#t #f))))))
(def for-each (lambda (fn l)
    (cond ((null? (cdr l)) (cons (fn (car l)) (cdr l)))
          (#t (cons (fn (car l)) (for-each fn (cdr l)))))))
(def incr (lambda (x)
    (+ x 1)))
(def decr (lambda (x)
    (- x 1)))
(def equal? (lambda (a b)
    (cond ((and (atom a) (atom b)) (eq a b))
          ((or (atom a) (atom b)) #f)
          (#t (equal? (cdr a) (cdr b))))))
(def append (lambda (x y
    (cond ((null? x) y)
           (#t (cons (car x) (append (cdr x) y)))))))
(def fact (lambda (n)
    (def fact-iter (lambda (prod count max)
        (cond ((> count max) prod)
              (#t (fact-iter (* count prod)
                               (+ count 1)
                               max)))))
    (fact-iter 1 1 n)))