(define lib "lib/lib.fig")

;; lists
(define (cadr x)
  (car (cdr x)))
(define (caddr x)
  (car (cdr (cdr x))))

(define (null? x)
  (if (atom x) (eq x nil) #f))

(define (not x)
  (if x #f #t))

(define (pair? x) (not (atom x)))

(define (fact n)
  (define (fact-iter prod count max)
    (if (> count max)
        prod
        (fact-iter (* prod count) (+ count 1) max)))
  (fact-iter 1 1 n))

(define (map proc seq)
  (if (pair? seq)
      (cons (proc (car seq))
            (map proc (cdr seq)))
      ()))

(define (cons x y)
  (define (inner-cons m)
    (m x y))
  inner-cons)

(define (car z)
  (define (inner-car p q)
    p)
  (z inner-car))


(define (cdr z) (z (lambda (p q) q)))
