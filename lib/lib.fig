(define lib "lib/lib.fig")

;; lists
(define (cadr x)
  (car (cdr x)))
(define (caddr x)
  (car (cdr (cdr x))))

(define (null? x)
  (if (atom x) (eq x nil) #f))

(define (not x)
  (if x #f #t))

(define (pair? x) (not (atom x)))

(define (fact n)
  (define (fact-iter prod count max)
    (if (> count max)
        prod
        (fact-iter (* prod count) (+ count 1) max)))
  (fact-iter 1 1 n))

(define (map proc seq)
  (if (pair? seq)
      (cons (proc (car seq))
            (map proc (cdr seq)))
      ()))

(define (cons x y)
  (lambda (m) (m x y)))

(define (car z) (z (lambda (p q) p)))

(define (cdr z) (z (lambda (p q) q)))

;; math
(define (= x y)
  (if (eq (type x) "number")
      (if (eq (type y) "number")
          (eq x y)
          #f)
      #f))
(define (zero? x)
  (= x 0))
(define (negative? x)
  (< x 0))
(define (positive? x)
  (>= x 0))
(define (odd? x)
  (= (mod x 2) 1))
(define (even? x)
  (= (mod x 2) 0))
(define (max x y)
  (if (> x y) x y))
(define (min x y)
  (if (< x y) x y))

